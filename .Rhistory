2 + 2
2 +3
tt = c("02",04,"fghfhg")
tt
install.packages("shiny")
install.packages("RSQLite")
install.packages(“sqldf”)
install.packages("sqldf")
library("RSQLite")
drv = SQLite()
db = dbConnect(drv,dbname = "References.sqlite")
auteurs <- data.frame(auteurID=1:3,
auteurNom=c("Nom1", "Nom2", "Nom3"),
auteurPrenom=c("Prenom1","Prenom2","Prenom3"))
auteurs
articles <- data.frame(articleID=1:4,
articleTitre=c("Titre1", "Titre2", "Titre3", "Titre4"),
articleAuteur=c(1,1,2,3),
articleAnnee=c(2013,2013,2014,2014),
articleRevue=c(1,1,2,2))
articles
revues <- data.frame(revuesID=1:3,
revueNom=c("Revue1","Revue2","Revue3"),
revueISSN=seq(11,1,-5),
revueIF=c(10.5,4.5,1.2))
revues
sapply(articles, class)
sapply(articles, function(x) dbDataType(db,x))
dbSendQuery(conn = db,
"CREATE TABLE TAuteurs (
auteurID INTEGER,
auteurNom TEXT NOT NULL,
auteurPrenom TEXT NOT NULL,
PRIMARY KEY (auteurID))")
dbSendQuery(conn = db,
"CREATE TABLE TRevues (
revueID INTEGER PRIMARY KEY,
revueNom TEXT NOT NULL,
revueISSN INTEGER UNIQUE NOT NULL,
revueIF REAL NOT NULL)")
dbSendQuery(conn = db,
"CREATE TABLE TArticles (
articleID INTEGER PRIMARY KEY,
articleTitre TEXT NOT NULL,
articleAuteur INTEGER NOT NULL,
articleAnnee INTEGER NOT NULL,
articleRevue INTEGER NOT NULL,
FOREIGN KEY (articleAuteur) REFERENCES TAuteur (auteurID),
FOREIGN KEY (articleRevue) REFERENCES TRevue (revueID))")
dbGetInfo()
dbGetInfo(db)
dbListTables(db)
dbReadTable(db,"TAuteurs")
dbSendQuery(db, "SELECT * FROM TArticles")
res = dbSendQuery(db, "SELECT * FROM TArticles")
res
dbFetch(res)
rm(list = ls(à))
rm(list = ls())
dbDisconnect()
install.packages("gWidgets")
rm(list = ls())
shiny::runApp('Z:/shiny_app')
runApp('Z:/shiny_app')
install.packages("DT")
runApp('Z:/shiny_app')
runApp('Z:/shiny_app')
runApp('Z:/shiny_app')
getwd()
shiny::runApp('~/shiny-gf')
runApp('~/shiny-gf')
runApp('~/shiny-gf')
runApp('~/shiny-gf')
df = rbind.data.frame(c("0000","krklr","eurur"),c("jfrjj","rru","totot"))
summary(df)
runApp('~/shiny-gf')
rr = c(0,2,0,3,6,4)
unique(rr)
length(rr) = length(unique(rr))
length(rr) == length(unique(rr))
rr
unique(rr)
runApp('~/shiny-gf')
dd = read.csv2("dataDic")
df
runApp('~/shiny-gf')
runApp('~/shiny-gf')
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
head(x)
kmeans(x,2)
kmeans(x[,1],2)
x
head(x)
zz = kmeans(x[,1],2)
zz
shiny::runApp('D:/NDIACM/omer')
rm(list = ls())
letters(1:28)
letters[1:28]
runApp('~/shiny-gf')
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
nuts3 = readOGR(dsn = "data", layer = "nuts3", verbose = TRUE)
nuts3 <- readOGR(dsn = "data", layer = "nuts3", verbose = TRUE)
install.packages
install.packages("cartography")
install.packages("leaflet", dependencies = TRUE)
library(leaflet)
library(leaflet)
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>% addTiles()
m
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 10)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 100)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = -1.5533600, lat = 47.2172500, zoom = 20)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = 5.4, lat = 43.3, zoom = 20)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = 5.4, lat = 43.3, zoom = 10)
m
m <- leaflet() %>% addTiles("Marseille") %>%
setView(lng = 5.4, lat = 43.3, zoom = 10)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = 5.4, lat = 43.3, zoom = 10)
m
villes <- data.frame(Ville = c("Paris", "Lille", "Nantes", "Marseille"),
Latitude = c(48.85661400000001, 50.62924999999999, 47.218371, 43.296482),
Longitude = c(2.3522219000000177, 3.057256000000052, -1.553621000000021, 5.369779999999992),
Population = c(2249975, 227560, 284970, 850726))
m <- leaflet(villes) %>% addTiles() %>%
addCircles(lng = ~Longitude, lat = ~Latitude, weight = 1,
radius = ~sqrt(Population) * 50, popup = ~paste(Ville, ":", Population),
color = "#a500a5", fillOpacity = 0.5)
m
library(rgdal)
---
title: "Add multiple layers in leaflet widget with R"
author: "Sébastien Rochette"
output:
html_document: default
---
```{r setup, include=FALSE}
# Define output size for the leaflet widget
knitr::opts_chunk$set(
fig.width = 4.5,
fig.height = 4.5
)
```
```{r leaflet, echo = FALSE, message = FALSE, warning = FALSE}
library(leaflet)
library(rgdal)
# Working directory ------------------------------------------------------------
wd <- ""
# Read multiple shapefiles with standardised name ------------------------------
species <- c("Sole", "Maquerel", "Langoustine", "Merlan")
Groupnames <- c("Cas 1 : Sole", "Cas 2 : Maquereau", "Cas 3 : Langoustine",
"Cas 4 : Merlan")
for (sp in species) {
for (type in c("Avis", "TAC")) {
files.sp <- readOGR(dsn = wd, layer = paste(sp, type, sep = "_"),
verbose = FALSE)
assign(paste(sp, type, sep = "_"), files.sp)
}
}
# Create leaflet widget --------------------------------------------------------
m <- leaflet() %>%
addTiles(group = "OSM (default)")
# Add multiple layers with a loop ----------------------------------------------
for (sp.N in 1:length(species)) {
sp <- species[sp.N]
for (type in c("Avis", "TAC")) {
tmp <- get(paste(sp, type, sep = "_"))
# Define different colors depending on type of data
if (type == "Avis") {
myPal <- colorRampPalette(c("blue", "skyblue", "navyblue"))
factpal.Div <- colorFactor(myPal(length(tmp$id)), tmp$id)
m <- m %>%
addPolygons(data = tmp,
fillColor = ~factpal.Div(tmp$id),
color = "#000000",
opacity = 1,
fillOpacity = 0.8,
stroke = TRUE,
weight = 1.5,
smoothFactor = 0.2,
popup = paste0("Zone d'avis : ", tmp$id),
group = Groupnames[sp.N]
)
} else {
myPal <- colorRampPalette(c("red", "orange", "brown"))
factpal.Div <- colorFactor(myPal(length(tmp$id)), tmp$id)
m <- m %>%
addPolygons(data = tmp,
fillColor = "#FF0000",
color = ~factpal.Div(tmp$id),
opacity = 0.6,
fillOpacity = 0.05,
stroke = TRUE,
weight = 5,
smoothFactor = 0.2,
popup = paste0("Zone de TAC : ", tmp$id),
group = Groupnames[sp.N]
)
}
}
} # end of species
# Additional leaflet options ---------------------------------------------------
m <- m %>%
# Add layers controls
addLayersControl(
baseGroups = Groupnames,
options = layersControlOptions(collapsed = FALSE)
) %>%
# Add common legend
addLegend(colors = c("#4367F4", "#FF0000"),
labels = c("Zones d'avis", "Zones de TAC"),
opacity = c(0.8, 0.5))
# Print the map ----------------------------------------------------------------
m
```
Widget réalisé par Sébastien de <https://statnmap.com>
***
m <- leaflet() %>% addTiles() %>%
setView(lng = 6.067919399999937, lat = 43.9351691, zoom = 10)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = 6.067919399999937, lat = 43.9351691, zoom = 5)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = 6.067919399999937, lat = 43.9351691, zoom = 10)
m
m <- leaflet() %>% addTiles() %>%
setView(lng = 6.067919399999937, lat = 43.9351691, zoom = 7)
m
detach("package:leaflet", unload=TRUE)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapStates)
library(leaflet)
leaflet(data = mapStates)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates = map("state", fill = TRUE, plot = TRUE)
mapStates
head(mapStates)
install.packages("mapdata")
library(mapdata)
library(maps)
map('worldHires')
map('worldHires', col=rainbow(18), fill=T, xlim=c(-19,60), ylim=c(-40,40))
map('worldHires', "japan", col='gray80', fill=T)
map('worldHires', "japan", col='gray80', fill=F)
map('worldHires', "japan", col='gray80', fill=T)
map('worldHires', "china", col='gray80', fill=T)
map('worldHires', "china", col='yellow10', fill=T)
map('worldHires', "china", col='yellow', fill=T)
map.cities(country='Japan', capitals=1, pch=15, col='red')
map('worldHires', "china", col='yellow', fill=T)
map.cities(country='china', capitals=1, pch=15, col='red')
map('worldHires', "japan", col='gray80', fill=T)
map.scale(134,26,metric=T, relwidth=0.3)
map.cities(country='Japan', capitals=1, pch=15, col='red')
points(135.7, 35, pch=16)
text(135.7, 35.3, label="Kyoto")
points(140.5, 37.8, pch=16)
text(140.5, 38.2, label="Fukushima")
map('worldHires', "china", col='gray80', fill=T)
map.scale(134,26,metric=T, relwidth=0.3)
map.cities(country='China', capitals=1, pch=15, col='red')
mapStates = map("state", fill = TRUE, plot = FALSE)
mapStates
mapStates = map("japan", fill = TRUE, plot = FALSE)
mapStates
library(leaflet)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapChina = map('worldHires', "china", col='yellow', fill=T)
mapChina
leaflet(data = mapChina) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapChina) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapChina = map('worldHires', "china", col='yellow', fill=T, xlim = 73, ylim = 37)
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = 32)
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = 100)
mapChina$y
min(mapChina$y)
class(mapChina$y)
is.na(mapCHina$y)
is.na(mapChina$y)
max(mapChina$y)
mapChina$y
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(30,40)
)
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(20,40)
)
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(0,40))
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(1,40))
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(10,40))
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(20,100))
mapChina = map('worldHires', "china", col='yellow', fill=T, ylim = c(30,40))
locator()
shiny::runApp('~/shiny-gf')
runApp('~/shiny-gf')
runApp('~/shiny-gf')
shiny::runApp('D:/NDIACM/interface')
library(leaflet)
com46p = spTransform(com46, "+init=epsg:4326")
rm(list = ls())
shiny::runApp('D:/NDIACM/pendu')
shiny::runApp('D:/NDIACM/pendu')
install.packages("RGtk2")
library(RGtk2)
package("igraph)")
package("igraph")
library(igraph)
library("igraph")
shiny::runApp('D:/NDIACM/cartoShiny')
shiny::runApp('~/shiny-gf')
runApp('~/shiny-gf')
runApp('~/shiny-gf')
runApp('~/shiny-gf')
shiny::runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
runApp('D:/NDIACM/Cartooo')
shiny::runApp('~/shiny-gf')
